#!/usr/bin/python3
#
# Copyright 2015 Google Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import unittest
from sys import stderr, path
from os.path import exists
from re import compile, match
from subprocess import run, PIPE

from unittest.runner import TextTestResult
TextTestResult.getDescription = lambda _, test: test.shortDescription()

class TestDepsToNinja(unittest.TestCase):

    def shortDescription(self):
        return self._testMethodDoc

    def test_shared_data_exists(self):
        """Something is horribly wrong---the directory for shared data
        does not exist."""
        self.assertTrue(
            exists("/tuscan_data/"))

    def test_top_level_exists(self):
        """The deps_to_ninja container did not create a 'deps_to_ninja'
        results directory."""
        self.assertTrue(
            exists("/tuscan_data/deps_to_ninja/"))

    def test_latest_exists(self):
        """The deps_to_ninja container did not create a 'latest' results
        directory."""
        self.assertTrue(
            exists("/tuscan_data/deps_to_ninja/latest/"))

    def test_ninja_file_exist(self):
        """The ninja file was not generated by deps_to_ninja."""
        self.assertTrue(
            exists("/tuscan_data/deps_to_ninja/latest/build.ninja"))

    def test_ninja_file_nonempty(self):
        """The ninja file generated by deps_to_ninja is empty."""
        counter = 0
        ninja_file = "/tuscan_data/deps_to_ninja/latest/build.ninja"
        if not exists(ninja_file): self.assertTrue(False)
        with open(ninja_file) as ninja_file:
            for line in ninja_file:
                self.assertTrue(True)
                return

    def test_base_packages_not_mentioned_as_build_targets(self):
        """  Arch Linux packages in groups base and base-devel should
        not be mentioned as build targets in the ninja.build file
        generated by deps_to_ninja. This is because we shall not build
        these packages; they will be provided as binaries and used to
        bootstrap building the rest of the operating system."""

        path.insert(0, "/tuscan_data/get_base_package_names/latest")
        from names import base_package_names, base_devel_package_names
        ninja_file = "/tuscan_data/deps_to_ninja/latest/build.ninja"
        if not exists(ninja_file): self.assertTrue(False)
        # Target of a makepkg rule
        pat1 = compile("^build\sbinaries/(?P<pkg>[-\+\.\w]+).pkg.tar.xz:")
        # Target of a phony rule
        pat2 = compile("^build\s(?P<pkg>[-\+\.\w]+):")

        for pat in [pat1, pat2]:
            counter = 0
            with open(ninja_file) as nf:
                for line in nf:
                    line = line.strip()
                    m = pat.match(line)
                    if m:
                        counter += 1
                        pkg_name = m.group("pkg")

                        self.assertNotIn(pkg_name,
                                base_package_names,
                                msg=("\n\nfound rule '" + line +
                                "', but " + pkg_name + " is in base"))

                        self.assertNotIn(pkg_name,
                                base_devel_package_names,
                                msg=("\n\nfound rule '" + line +
                                "', but " + pkg_name +
                                " is in base-devel"))

                self.assertNotEqual(counter, 0,
                    msg=("\n\nUseless test case: the pattern " +
                         str(pat) + " did not match any lines" +
                         " in the build.ninja file"))


if __name__ == "__main__":
    unittest.main()
