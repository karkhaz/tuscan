#!/usr/bin/env python2
#
# Copyright 2016 Kareem Khazem. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied.
# See the License for the specific language governing permissions and
# limitations under the License.


from datetime import datetime
from voluptuous import All, Any, Length, Optional, Range, Required
from voluptuous import Schema


# We can't merely specify that strings ought to be of type 'str' in the
# schemata, since Python 2.7 treats unicode strings specially.
_nonempty_string = All(Any(str, unicode), Length(min=1))
_string = All(Any(str, unicode))


"""Schema for JSON files that are generated by the make_package stage"""
make_package_schema = Schema({
    Required("build"): _nonempty_string,
    Required("return_code"): All(int, Range(min=0)),
    Required("time"): All(int, Range(min=0)),
    Optional("toolchain"): _nonempty_string,
    Optional("errors"): list,
    Optional("bad_deps"): list,
    Required("log"): [
        # Logs have a head and body. Typically, for each command that
        # gets executed by the make_package stage, the head will be the
        # command and the body will be the output of that command.
        # Some log structures might have an empty body, though.
        Schema({
            Required("head"): _nonempty_string,
            Required("kind"): Any("command", "info", "die"),
            Required("time"): (lambda s:
                datetime.strptime(s, "%Y-%m-%dT%H:%M:%S")),
            Required("body"): [
                Schema(_string)
            ]
        })
    ]
})


"""Schema for JSON files dumped out of the post-processing stage

This is currently identical to make_package_schema, but will change as
more features are added to the post-processing pass.
"""
post_processed_schema = Schema({
    Required("build"): _nonempty_string,
    Required("return_code"): All(int, Range(min=0)),
    Required("time"): All(int, Range(min=0)),
    Optional("toolchain"): _nonempty_string,
    Optional("errors"): list,
    Optional("bad_deps"): list,
    Required("log"): [
        Schema({
            Required("head"): _nonempty_string,
            Required("kind"): Any("command", "info", "die"),
            Required("time"): (lambda s:
                datetime.strptime(s, "%Y-%m-%dT%H:%M:%S")),
            Required("body"): [
                Schema(_string)
            ]
        })
    ]
})
